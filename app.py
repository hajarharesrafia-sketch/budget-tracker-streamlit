

# --- Import des biblioth√®ques n√©cessaires ---
import streamlit as st
import pandas as pd
from datetime import date
import matplotlib.pyplot as plt

# --- Configuration g√©n√©rale de la page ---
st.set_page_config(page_title="Suivi de Budget", page_icon="üí∞", layout="wide")

# --- Titre et description ---
st.title(" Application de Suivi de Budget")
st.write("Ajoutez vos revenus et d√©penses, et suivez votre solde en temps r√©el.")

# ==============================
# Chargement ou cr√©ation du fichier CSV
# ==============================

def load_data():
    """Charge le fichier CSV contenant les transactions, ou le cr√©e s'il n'existe pas."""
    try:
        data = pd.read_csv("data/transactions.csv")
    except FileNotFoundError:
        data = pd.DataFrame(columns=["Date", "Cat√©gorie", "Type", "Montant", "Description"])
        data.to_csv("data/transactions.csv", index=False)
    return data

# Chargement initial
data = load_data()

# ==============================
# Formulaire d'ajout de transaction
# ==============================

st.header("‚ûï Ajouter une nouvelle transaction")

with st.form("transaction_form", clear_on_submit=True):
    col1, col2, col3 = st.columns(3)

    with col1:
        d = st.date_input("Date", value=date.today())  # S√©lection de la date
    with col2:
        categorie = st.selectbox(
            "Cat√©gorie",
            ["Salaire", "Alimentation", "Transport", "Loisirs", "Sant√©", "Autres"]
        )
    with col3:
        type_ = st.radio("Type", ["Revenu", "D√©pense"])  # Choix du type

    montant = st.number_input("Montant (‚Ç¨)", min_value=0.0, step=0.5)
    description = st.text_input("Description (facultatif)")

    submitted = st.form_submit_button("Ajouter")

    if submitted:
        # Cr√©ation d'une nouvelle ligne
        new_row = pd.DataFrame({
            "Date": [d],
            "Cat√©gorie": [categorie],
            "Type": [type_],
            "Montant": [montant],
            "Description": [description]
        })

        # ‚úÖ Ajout direct √† la DataFrame
        data = pd.concat([data, new_row], ignore_index=True)

        # ‚úÖ Sauvegarde dans le CSV
        data.to_csv("data/transactions.csv", index=False)

        # ‚úÖ Message de confirmation
        st.success("‚úÖ Transaction ajout√©e avec succ√®s !")

        # ‚úÖ Relance imm√©diate pour actualiser le tableau et le graphique
        st.rerun()

# ==============================
# Affichage du tableau complet
# ==============================

st.header("üìã Historique des transactions")
st.dataframe(data)

# ==============================
# R√©sum√© du budget
# ==============================

st.header("üìä R√©sum√© du budget")

# Conversion du montant en num√©rique
data["Montant"] = pd.to_numeric(data["Montant"], errors="coerce")

# Calculs de base
revenus = data[data["Type"].str.lower().str.strip() == "revenu"]["Montant"].sum()
depenses = data[data["Type"].str.lower().str.strip() == "d√©pense"]["Montant"].sum()
solde = revenus - depenses

# Affichage sous forme de m√©triques
col1, col2, col3 = st.columns(3)
col1.metric("Total Revenus", f"{revenus:.2f} ‚Ç¨", "+")
col2.metric("Total D√©penses", f"{depenses:.2f} ‚Ç¨", "-")
col3.metric("Solde", f"{solde:.2f} ‚Ç¨")

# ==============================
# Visualisation graphique
# ==============================

st.header("üìà Visualisation des d√©penses par cat√©gorie")

# Filtrer les d√©penses uniquement
depenses_df = data[data["Type"].str.lower().str.strip() == "d√©pense"]

# Regrouper les d√©penses par cat√©gorie
depenses_par_categorie = (
    depenses_df.groupby("Cat√©gorie")["Montant"]
    .sum()
    .sort_values(ascending=False)
)

# Affichage du graphique
if not depenses_par_categorie.empty:
    fig, ax = plt.subplots()
    bars = ax.bar(depenses_par_categorie.index, depenses_par_categorie.values, color="red", alpha=0.8)

    # Ajouter les montants au-dessus de chaque barre
    for bar in bars:
        yval = bar.get_height()
        ax.text(bar.get_x() + bar.get_width() / 2, yval + 5, f"{yval:.0f}‚Ç¨", ha="center", va="bottom")

    ax.set_title("D√©penses par cat√©gorie", fontsize=16, fontweight="bold")
    ax.set_xlabel("Cat√©gorie")
    ax.set_ylabel("Montant (‚Ç¨)")
    plt.xticks(rotation=45)

    st.pyplot(fig)
else:
    st.info("Aucune d√©pense enregistr√©e pour le moment.")
